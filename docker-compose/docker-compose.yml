version: '3.8'

services:
  # Databases
  postgres-user-db:
    image: postgres:14-alpine
    container_name: user-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: user_db
    volumes:
      - user-db-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  postgres-room-db:
    image: postgres:14-alpine
    container_name: room-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: room_db
    volumes:
      - room-db-data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  postgres-reservation-db:
    image: postgres:14-alpine
    container_name: reservation-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: reservation_db
    volumes:
      - reservation-db-data:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Kafka services
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181 || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "room_events:1:1"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server kafka:9093 --list"]
      interval: 10s
      timeout: 10s
      retries: 5

  # Application services
  user-service:
    build:
      context: ../meeting-room-res-system-api/user-service
      dockerfile: Dockerfile
    container_name: user-service
    depends_on:
      - postgres-user-db
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres-user-db:5432/user_db
      - JWT_SECRET_KEY=shared_jwt_secret_for_development
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - ADMIN_EMAILS=${ADMIN_EMAILS}
      - DEBUG=True
    ports:
      - "5000:5000"
    restart: on-failure
    
  room-service:
    build:
      context: ../meeting-room-res-system-api/room-service
      dockerfile: Dockerfile
    container_name: room-service
    depends_on:
      - postgres-room-db
      - kafka
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres-room-db:5432/room_db
      - JWT_SECRET_KEY=shared_jwt_secret_for_development
      - KAFKA_BROKER_URL=kafka:9093
      - DEBUG=True
    ports:
      - "5001:5001"
    restart: on-failure

  reservation-service:
    build:
      context: ../meeting-room-res-system-api/reservation-service
      dockerfile: Dockerfile
    container_name: reservation-service
    depends_on:
      - postgres-reservation-db
      - kafka
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres-reservation-db:5432/reservation_db
      - JWT_SECRET_KEY=shared_jwt_secret_for_development
      - KAFKA_BROKER_URL=kafka:9093
      - DEBUG=True
    ports:
      - "5002:5002"
    restart: on-failure

volumes:
  user-db-data:
  room-db-data:
  reservation-db-data:
