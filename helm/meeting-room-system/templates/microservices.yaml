{{- if .Values.userService.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-service
  namespace: {{ .Values.global.namespace }}
spec:
  replicas: {{ .Values.userService.replicas }}
  selector:
    matchLabels:
      app: user-service
  template:
    metadata:
      labels:
        app: user-service
    spec:
      containers:
      - name: user-service
        image: "{{ if .Values.global.imageRegistry }}{{ .Values.global.imageRegistry }}/{{ end }}{{ .Values.global.imageRepository }}/{{ .Values.userService.image }}:{{ .Values.global.imageTag }}"
        ports:
        - containerPort: {{ .Values.userService.port }}
        env:
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: jwt-secret
              key: JWT_SECRET_KEY
        - name: DB_HOST
          value: user-db
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        - name: DB_NAME
          value: user_service_db
        - name: GOOGLE_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: google-oauth-secret
              key: GOOGLE_CLIENT_ID
        - name: GOOGLE_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: google-oauth-secret
              key: GOOGLE_CLIENT_SECRET
        - name: GOOGLE_ADMIN_EMAILS
          valueFrom:
            secretKeyRef:
              name: google-oauth-secret
              key: GOOGLE_ADMIN_EMAILS
        - name: KAFKA_HOST
          value: kafka:9092
        readinessProbe:
          httpGet:
            path: /api/health
            port: {{ .Values.userService.port }}
          initialDelaySeconds: 15
          periodSeconds: 10
        resources:
{{ toYaml .Values.userService.resources | indent 10 }}
---
apiVersion: v1
kind: Service
metadata:
  name: user-service
  namespace: {{ .Values.global.namespace }}
spec:
  selector:
    app: user-service
  ports:
  - port: 80
    targetPort: {{ .Values.userService.port }}
{{- end }}

{{- if .Values.roomService.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: room-service
  namespace: {{ .Values.global.namespace }}
spec:
  replicas: {{ .Values.roomService.replicas }}
  selector:
    matchLabels:
      app: room-service
  template:
    metadata:
      labels:
        app: room-service
    spec:
      containers:
      - name: room-service
        image: "{{ if .Values.global.imageRegistry }}{{ .Values.global.imageRegistry }}/{{ end }}{{ .Values.global.imageRepository }}/{{ .Values.roomService.image }}:{{ .Values.global.imageTag }}"
        ports:
        - containerPort: {{ .Values.roomService.port }}
        env:
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: jwt-secret
              key: JWT_SECRET_KEY
        - name: DB_HOST
          value: room-db
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        - name: DB_NAME
          value: room_service_db
        - name: KAFKA_HOST
          value: kafka:9092
        readinessProbe:
          httpGet:
            path: /api/health
            port: {{ .Values.roomService.port }}
          initialDelaySeconds: 15
          periodSeconds: 10
        resources:
{{ toYaml .Values.roomService.resources | indent 10 }}
---
apiVersion: v1
kind: Service
metadata:
  name: room-service
  namespace: {{ .Values.global.namespace }}
spec:
  selector:
    app: room-service
  ports:
  - port: 80
    targetPort: {{ .Values.roomService.port }}
{{- end }}

{{- if .Values.reservationService.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: reservation-service
  namespace: {{ .Values.global.namespace }}
spec:
  replicas: {{ .Values.reservationService.replicas }}
  selector:
    matchLabels:
      app: reservation-service
  template:
    metadata:
      labels:
        app: reservation-service
    spec:
      containers:
      - name: reservation-service
        image: "{{ if .Values.global.imageRegistry }}{{ .Values.global.imageRegistry }}/{{ end }}{{ .Values.global.imageRepository }}/{{ .Values.reservationService.image }}:{{ .Values.global.imageTag }}"
        ports:
        - containerPort: {{ .Values.reservationService.port }}
        env:
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: jwt-secret
              key: JWT_SECRET_KEY
        - name: DB_HOST
          value: reservation-db
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        - name: DB_NAME
          value: reservation_service_db
        - name: KAFKA_HOST
          value: kafka:9092
        - name: ROOM_SERVICE_URL
          value: http://room-service
        - name: USER_SERVICE_URL
          value: http://user-service
        readinessProbe:
          httpGet:
            path: /api/health
            port: {{ .Values.reservationService.port }}
          initialDelaySeconds: 15
          periodSeconds: 10
        resources:
{{ toYaml .Values.reservationService.resources | indent 10 }}
---
apiVersion: v1
kind: Service
metadata:
  name: reservation-service
  namespace: {{ .Values.global.namespace }}
spec:
  selector:
    app: reservation-service
  ports:
  - port: 80
    targetPort: {{ .Values.reservationService.port }}
{{- end }}